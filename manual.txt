Abstract:
The development of Advanced Driver Assistance Systems (ADAS) and Autonomous Driving (AD) necessitates rigorous scenario-based verification to ensure safety and reliability. Behavior-Driven Development (BDD) facilitates collaboration between domain experts and engineers through natural language specifications. However, manual scenario generation is labor-intensive and prone to errors. This paper proposes a Multi-Agent System (MAS) approach to automate BDD in scenario-based verification for ADAS/AD. Our approach employs Generative AI-enabled agents to generate scenarios, each capturing domain-specific knowledge, and interactions. These agents collaborate with a Large Language Model (LLM) to generate precise, context-aware features and scenarios for each ADAS/AD feature, enabling efficient and scalable verification of ADAS functionalities. We focus on generating Gherkin scripts (.feature) and Python scripts (.py) for scenario-based verification, leveraging LLMs and prompt engineering with MAS. We evaluate the effectiveness of the MAS approach by demonstrating its applicability in real-world driving scenarios.

Keywords
Multi-Agent System, Large Language Models, Prompt Engineering, Behavior-Driven Development, Scenario-based verification, Generative AI: Large Language Models (LLMs), Prompt Engineering; Automate Driver Assistance System (ADAS)/ Autonomous Driving (AD), Software Testing, Test case generation

 % Scenario: Leading vehicle suddenly brakes hard
 % Given The vehicle's adaptive cruise control is engaged
 % And The leading vehicle is traveling at 60 mph
 % And The vehicle is traveling at 60 mph, maintaining a safe following distance
 % When The leading vehicle suddenly decelerates at a rate of 0.8g
 % Then The vehicle should rapidly decelerate to avoid a collision
 % And The vehicle should maintain a safe following distance, if possible
 
 acc_engaged = true;
 leading_vehicle_speed = 60; % mph
 ego_vehicle_initial_speed = 60; % mph
 safe_distance = calculate_safe_following_distance(ego_vehicle_initial_speed);
 leading_deceleration_rate = 0.8 * 32.2; % ft/s^2
 time_step = 0.1; % seconds
 
 % Initialize log variables
 time = 0;
 ego_speed_log = [];
 leading_speed_log = [];
 distance_log = [];
 safe_distance_log = [];
 
 % Simulation loop
 while acc_engaged
  % Leading vehicle decelerates
  leading_vehicle_speed = max(0, leading_vehicle_speed - leading_deceleration_rate * time_step);
 
  % Calculate distance after leading vehicle brakes
  current_distance = calculate_distance(ego_vehicle_initial_speed, leading_vehicle_speed);
 
  % Log data
  time = time + time_step;
  ego_speed_log = [ego_speed_log, ego_vehicle_initial_speed];
  leading_speed_log = [leading_speed_log, leading_vehicle_speed];
  distance_log = [distance_log, current_distance];
  safe_distance_log = [safe_distance_log, calculate_safe_following_distance(ego_vehicle_initial_speed)];
 
  % Check if collision is imminent
  if current_distance < 0
  assert(false, 'Collision occurred');
  break;
  end
 
  % Ego vehicle decelerates rapidly
  emergency_deceleration = calculate_emergency_deceleration(current_distance);
  ego_vehicle_initial_speed = max(0, ego_vehicle_initial_speed + emergency_deceleration * time_step);
 
  % Check if safe following distance is maintained
  safe_following_distance = calculate_safe_following_distance(ego_vehicle_initial_speed);
  if current_distance >= safe_following_distance
  assert(true, 'Safe following distance maintained');
  else
  assert(true, 'Safe following distance could not be maintained');
  end
  
  % Display log data
  disp('--- Simulation Results ---');
  disp(['Time: ', num2str(time), ' s']);
  disp(['Ego Vehicle Speed: ', num2str(ego_vehicle_initial_speed), ' mph']);
  disp(['Leading Vehicle Speed: ', num2str(leading_vehicle_speed), ' mph']);
  disp(['Distance: ', num2str(current_distance), ' feet']);
  disp(['Safe Distance: ', num2str(safe_following_distance), ' feet']);
  
  break;
 end
 
 % Helper functions (example implementations)
 function distance = calculate_distance(ego_speed, lead_speed)
  % Placeholder: Replace with actual distance calculation logic
  distance = abs(ego_speed - lead_speed) * 5;
 end
 
 function safe_distance = calculate_safe_following_distance(ego_speed)
  % Placeholder: Replace with actual safe distance calculation logic
  safe_distance = ego_speed * 2; % Example: 2 feet per mph
 end
 
 function emergency_deceleration = calculate_emergency_deceleration(distance)
  % Placeholder: Replace with actual emergency deceleration calculation logic
  emergency_deceleration = -8; % Example emergency deceleration value
 end
